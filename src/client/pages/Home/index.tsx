import "./index.scss";
import bannerHome from "/assets/images/banner-home.svg";
import location from "/assets/images/location.svg";
import destination from "/assets/images/destination.svg";
import dateTime from "/assets/images/dateTime.svg";
import placePdf from "/assets/images/placePdf.svg";
import ButtonLong from "/assets/images/button-long.svg";
import Dropdown from "@/client/components/DropDown";
import down from "/assets/images/arrow-down.svg";
import { useState } from "react";
import DateRangePicker from "@/client/components/DateRangePicker";
const Home = () => {
  const [isDepartureOpen, setIsDepartureOpen] = useState(false);
  const [isDestinationOpen, setIsDestinationOpen] = useState(false);
  const [showDatePicker, setShowDatePicker] = useState(false);
  const [selectedDate, setSelectedDate] = useState(null);
  const [departure, setDeparture] = useState("");
  const [destination, setDestination] = useState("");
  const locationsDestination = [
    "T·∫•t c·∫£",
    "C·ª≠u Tr·∫°i C√¢u",
    "Ph∆∞·ª£ng Ho√†ng C·ªï Tr·∫•n",
    "Qu√Ω Ch√¢u",
    "T√¢y An",
    "T√¢y T·∫°ng",
    "ƒê√†i Loan",
  ];
  const locationsDeparture = ["T·∫•t c·∫£", "H√† N·ªôi", "H·ªì Ch√≠ Minh"];
  return (
    <div className="">
      <div className="grid lg:grid-cols-7 gap-[66px] max-w-7xl mx-auto relative z-[10]">
        <div className="col-span-4 z-50">
          <div className="max-w-[560px]">
            <h1 className="text-[48px] font-bold leading-[56px] text-[#333]">
              Chuy√™n tour tr·ªçn g√≥i gh√©p kh√°ch l·∫ª cho ƒë·∫°i l√Ω, CTV
            </h1>
          </div>
          <div className="mt-4 max-w-[533px]">
            <span className="text-base text-[#333]">
              HanVina Travel - N∆°i m√† chuy·∫øn du l·ªãch c·ªßa b·∫°n tr·ªü n√™n ƒë√°ng nh·ªõ v√†
              tuy·ªát v·ªùi. V·ªõi cam k·∫øt v·ªÅ uy t√≠n, ch·∫•t l∆∞·ª£ng d·ªãch v·ª• v√† ƒë·ªôi ng≈©
              chuy√™n vi√™n t∆∞ v·∫•n gi√†u kinh nghi·ªám, ch√∫ng t√¥i t·ª± h√†o l√† ƒë·ªëi t√°c
              tin c·∫≠y c·ªßa b·∫°n tr√™n h√†nh tr√¨nh kh√°m ph√° th·∫ø gi·ªõi.
            </span>
          </div>

          <div className="bg-white shadow-[0px_10px_24px_rgba(20,20,21,0.09)] rounded-[20px] p-6 max-w-7xl mx-auto mt-10">
            <div className="lg:flex items-center justify-center gap-[24px]">
              {/* ƒêi·ªÉm ƒëi */}
              <div className="relative cursor-pointer">
                <div
                  className="flex items-center gap-4 py-2 rounded-full"
                  onClick={() => {
                    setIsDepartureOpen(!isDepartureOpen);
                    setIsDestinationOpen(false);
                  }}
                >
                  <img src={location} alt="" />
                  <div>
                    <div className="font-semibold text-[#333] flex gap-x-2 items-center">
                      <span>ƒêi·ªÉm ƒëi</span>
                      <div className="w-6 h-6">
                        <img src={down} alt="" className="w-full h-full" />
                      </div>
                    </div>
                    <div className="text-[#767A7F] text-sm whitespace-nowrap">
                      {departure || "Ch·ªçn ƒëi·ªÉm kh·ªüi h√†nh"}
                    </div>
                  </div>
                </div>

                {isDepartureOpen && (
                  <div className="absolute top-full left-0 mt-2 z-50">
                    <Dropdown
                      locations={locationsDeparture}
                      selected={departure}
                      onSelect={(value) => {
                        setDeparture(value);
                        setIsDepartureOpen(false);
                      }}
                    />
                  </div>
                )}
              </div>

              {/* ƒêi·ªÉm ƒë·∫øn */}
              <div className="relative cursor-pointer ">
                <div
                  className="flex items-center gap-4 py-2 rounded-full "
                  onClick={() => {
                    setIsDepartureOpen(false);
                    setIsDestinationOpen(!isDestinationOpen);
                  }}
                >
                  <img src={dateTime} alt="" />
                  <div>
                    <div className="font-semibold text-[#333] flex gap-x-2 items-center">
                      <span>ƒêi·ªÉm ƒë·∫øn</span>
                      <div className="w-6 h-6">
                        <img src={down} alt="" className="w-full h-full" />
                      </div>
                    </div>
                    <div className="text-[#767A7F] text-sm whitespace-nowrap">
                      {destination || "Ch·ªçn ƒëi·ªÉm ƒë·∫øn"}
                    </div>
                  </div>
                </div>

                {isDestinationOpen && (
                  <div className="absolute top-full left-0 mt-2 z-50">
                    <Dropdown
                      locations={locationsDestination}
                      selected={destination}
                      onSelect={(value) => {
                        console.log("üöÄ ~ Home ~ value:222", value);
                        setDestination(value);
                        setIsDestinationOpen(false);
                      }}
                    />
                  </div>
                )}
              </div>

              <div className="relative cursor-pointer">
                <div
                  className="flex items-center gap-4 py-2 rounded-full"
                  onClick={() => setShowDatePicker(!showDatePicker)}
                >
                  <img src={dateTime} alt="" />
                  <div>
                    <div className="font-semibold text-[#333] flex gap-x-2 items-center">
                      <span>Th·ªùi gian</span>
                      <div className="w-6 h-6">
                        <img src={down} alt="" className="w-full h-full" />
                      </div>
                    </div>
                    <div className="text-[#767A7F] text-sm whitespace-nowrap">
                      {selectedDate
                        ? selectedDate.toLocaleDateString("vi-VN")
                        : "Trong kho·∫£ng th·ªùi gian"}
                    </div>
                  </div>
                </div>

                {showDatePicker && (
                  <div className="absolute top-full left-0 mt-2 z-50 bg-white shadow-lg rounded-lg p-4">
                    <DateRangePicker
                      onConfirm={(date) => {
                        setSelectedDate(date);
                        setShowDatePicker(false);
                      }}
                    />
                  </div>
                )}
              </div>
            </div>

            <div className="mt-[28px] relative h-[48px] cursor-pointer">
              <img src={ButtonLong} className="w-full h-[48px] mx-auto" />
              <div className="absolute w-full top-[12px] text-center font-[500] text-[16px] text-white">
                T√¨m ki·∫øm
              </div>
            </div>
          </div>
        </div>
        <div className="col-span-3 z-50 hidden lg:block">
          <div className="relative rounded-[230px]">
            <embed src={bannerHome} className="" />
          </div>
        </div>
      </div>
      <div className="w-full absolute bottom-[-20px]">
        <img src={placePdf} alt="" className="w-full" />
      </div>
    </div>
  );
};

export default Home;
